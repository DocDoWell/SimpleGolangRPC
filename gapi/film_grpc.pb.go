// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: film.proto

package gapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RatedFilmServiceClient is the client API for RatedFilmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatedFilmServiceClient interface {
	GetRatedFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*GetFilmResponse, error)
}

type ratedFilmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatedFilmServiceClient(cc grpc.ClientConnInterface) RatedFilmServiceClient {
	return &ratedFilmServiceClient{cc}
}

func (c *ratedFilmServiceClient) GetRatedFilm(ctx context.Context, in *GetFilmRequest, opts ...grpc.CallOption) (*GetFilmResponse, error) {
	out := new(GetFilmResponse)
	err := c.cc.Invoke(ctx, "/gapi.RatedFilmService/getRatedFilm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatedFilmServiceServer is the server API for RatedFilmService service.
// All implementations must embed UnimplementedRatedFilmServiceServer
// for forward compatibility
type RatedFilmServiceServer interface {
	GetRatedFilm(context.Context, *GetFilmRequest) (*GetFilmResponse, error)
	mustEmbedUnimplementedRatedFilmServiceServer()
}

// UnimplementedRatedFilmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatedFilmServiceServer struct {
}

func (UnimplementedRatedFilmServiceServer) GetRatedFilm(context.Context, *GetFilmRequest) (*GetFilmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatedFilm not implemented")
}
func (UnimplementedRatedFilmServiceServer) mustEmbedUnimplementedRatedFilmServiceServer() {}

// UnsafeRatedFilmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatedFilmServiceServer will
// result in compilation errors.
type UnsafeRatedFilmServiceServer interface {
	mustEmbedUnimplementedRatedFilmServiceServer()
}

func RegisterRatedFilmServiceServer(s grpc.ServiceRegistrar, srv RatedFilmServiceServer) {
	s.RegisterService(&RatedFilmService_ServiceDesc, srv)
}

func _RatedFilmService_GetRatedFilm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatedFilmServiceServer).GetRatedFilm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gapi.RatedFilmService/getRatedFilm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatedFilmServiceServer).GetRatedFilm(ctx, req.(*GetFilmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RatedFilmService_ServiceDesc is the grpc.ServiceDesc for RatedFilmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatedFilmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gapi.RatedFilmService",
	HandlerType: (*RatedFilmServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRatedFilm",
			Handler:    _RatedFilmService_GetRatedFilm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "film.proto",
}
